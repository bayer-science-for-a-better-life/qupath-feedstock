#
# QuPath conda-forge friendly recipe.
# This recipe version compiles QuPath from source and so is suitable to cut releases with hotfixes.
#
# Since the JDK situation in conda-forge is at the moment a bit stuck,
# we repackage QuPath releases, including the current JRE used to develop them.
#
# This package allows using QuPath both as a standalone application or pimped
# from python using "ququ", that should be able to automagically find qupath
# when this package is installed.
#

{% set repo="https://github.com/qupath/qupath" %}
{% set commit="df7dea21e4a0ead5743995143780d022bdcfded1" %}
{% set sha256="99c3c912c2c77b6713adc7cee79fcc485b8a55d10e650241218701f4ea293814" %}
{% set dev_version="0.2.0-m10-SNAPSHOT" %}
{% set github_version="0.2.0-m10dev0" %}
{% set version="0.2.0.m10dev0" %}
{% set build_number="1" %}

package:
  name: qupath
  version: {{ version }}

source:

  - url: {{ repo }}/archive/{{ commit }}.tar.gz
    sha256: {{ sha256 }}
    folder: qupath

build:

  number: {{ build_number }}

  # See https://conda.io/projects/conda-build/en/latest/resources/define-metadata.html#binary-relocation
  # QuPath is working fine without relocation, but chokes if conda messes around these shared objects (at least in macos)
  binary_relocation: False

  script:

    # --- linux
    - mkdir -p ${PREFIX}/opt/QuPath-{{ github_version }}             # [linux]
    - cd qupath                                                      # [linux]
    - ./gradlew createPackage                                        # [linux]
    - cd ./build/dist/QuPath-{{ dev_version }}                       # [linux]
    - mv bin lib ${PREFIX}/opt/QuPath-{{ github_version }}           # [linux]
    - cd ${PREFIX}/opt                                               # [linux]
    - ln -s QuPath-{{ github_version }} QuPath                       # [linux]
    - mkdir -p ${PREFIX}/bin                                         # [linux]
    - cd ${PREFIX}/bin                                               # [linux]
    - ln -s ../opt/QuPath/bin/QuPath-{{ dev_version }} ./qupath-bin  # [linux]
    - cp ${RECIPE_DIR}/qupath-linux ${PREFIX}/bin/qupath             # [linux]

    # --- macos
    - cd qupath                                                                     # [osx]
    - ./gradlew createPackage                                                       # [osx]
    - mv ./build/dist/QuPath-{{ dev_version }}.app ${PREFIX}/bin                    # [osx]
    - cd ${PREFIX}/bin                                                              # [osx]
    - ln -s QuPath-{{ dev_version }}.app QuPath.app                                 # [osx]
    - chmod +x QuPath.app/Contents/MacOS/QuPath-{{ dev_version }}                   # [osx]
    - cp ${RECIPE_DIR}/qupath-macos ${PREFIX}/bin/qupath                            # [osx]

    # --- windows
    - echo on  # [win]
    - cd qupath                                                                               # [win]
    - dir                                                                                     # [win]
    - gradlew createPackage                                                                   # [win]
    - dir  # [win]
    - FAIL  # [win]
    - mkdir %LIBRARY_PREFIX%\QuPath                                                           # [win]
    - cd %SRC_DIR%\qupath\build\                                                              # [win]
    - echo %cd%  # [win]
    - dir                                                                                     # [win]
    - robocopy %SRC_DIR%\qupath\build\dist\QuPath-{{ dev_version }} %LIBRARY_PREFIX%\QuPath\ *.* /E /MOV                    # [win]
    - copy %LIBRARY_PREFIX%\QuPath\QuPath-{{ dev_version }}.exe %LIBRARY_PREFIX%\QuPath\QuPath.exe  # [win]

  # At the moment these are milestones and there are no API stability guarantees.
  # So let's not pin here yet
  # run_exports:
    # - {{ pin_subpackage('qupath', max_pin='x.x') }}

requirements:
  build:
    - openjdk >=14.*
  run:
    - pixman >0.38.4  # [unix]

test:
  commands:
    # some smoke tests
    - qupath -script fake -image fake.ome.tiff  # [unix]

    # TODO: work some proper tests in windows (when we setup access to a VM or get a windows machine)
    # Notes: using this command here does not work (YAML cannot be parsed)
    #        using it in run_test.bat hangs the test
    # - %LIBRARY_PREFIX%\QuPath\QuPath.exe -script fake -image fake.ome.tiff # [win]
    # So we only check that the files exist in the package...
    - if exist %LIBRARY_PREFIX%\QuPath\QuPath.exe (exit 0) else (exit 1)  # [win]

    # maybe do run some script to exercise the library (e.g. make sure openslide is found and works correctly)
    # maybe install ququ and test some bindings

about:
  home: https://qupath.github.io/
  license: GPLv3
  # TODO probably we should specify license_file with all licenses from qupath deps... they are included anyway in package
  # Maybe copy them as part of the build process (see e.g. the ffmpeg windows recipe)
  summary: QuPath is an open, powerful, flexible, extensible software platform for whole slide image analysis.

extra:
  recipe-maintainers:
    - sdvillal
